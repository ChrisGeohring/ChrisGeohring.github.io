{"version":3,"sources":["components/Navbar/index.tsx","sections/contact/index.tsx","sections/home/index.tsx","sections/aboutme/index.tsx","components/ProjectCard/index.tsx","sections/projects/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["MyNavbar","props","toggle","cs","state","isOpen","setState","isDarkMode","window","matchMedia","matches","Navbar","color","dark","this","light","expand","fixed","id","Container","NavbarBrand","href","className","NavbarToggler","onClick","Collapse","navbar","Nav","NavItem","NavLink","Component","Contact","alt","src","width","height","Home","autoPlay","loop","muted","playsInline","type","AboutMe","Row","Col","xs","ProjectCard","cardFooter","link","CardFooter","languages","map","language","Badge","variant","Button","Card","CardHeader","CardTitle","title","CardBody","CardText","text","Projects","projects","projectData","project","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b3b35abb.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Collapse, Container, Navbar, NavbarToggler, NavbarBrand, Nav, NavItem, NavLink } from \"reactstrap\";\nimport \"./index.scss\";\n\ninterface NavProps {\n  isOpen: boolean;\n}\nexport default class MyNavbar extends Component<{}, NavProps> {\n  constructor(props: any) {\n    super(props);\n    this.state = { isOpen: false };\n  }\n\n  toggle = (): void => {\n    const cs = this.state.isOpen;\n    this.setState({ isOpen: !cs });\n  };\n\n  isDarkMode = (): boolean => {\n    return window.matchMedia(\"(prefers-color-scheme: dark)\").matches;\n  };\n\n  render() {\n    return (\n      <div>\n        <Navbar\n          color=\"faded\"\n          dark={this.isDarkMode()}\n          light={!this.isDarkMode()}\n          expand=\"md\"\n          fixed=\"top\"\n          id=\"my-navbar\"\n        >\n          <Container>\n            <NavbarBrand href=\"#home\" className=\"mr-auto\" id=\"navbrand\">\n              Chris Geohring\n            </NavbarBrand>\n            <NavbarToggler id=\"navbar-toggle\" onClick={this.toggle} />\n            <Collapse isOpen={this.state.isOpen} navbar>\n              <Nav className=\"ml-auto\" navbar>\n                <NavItem>\n                  <NavLink href=\"#about\">About</NavLink>\n                </NavItem>\n                <NavItem>\n                  <NavLink href=\"#projects\">Projects</NavLink>\n                </NavItem>\n                <NavItem>\n                  <NavLink href=\"#contact\">Contact</NavLink>\n                </NavItem>\n              </Nav>\n            </Collapse>\n          </Container>\n        </Navbar>\n      </div>\n    );\n  }\n}\n","import React, { ReactElement } from \"react\";\n// import Lottie from 'react-lottie';\nimport \"./index.scss\";\n\nconst Contact = (): ReactElement => {\n  return (\n    <div>\n      <footer id=\"contact\">\n        <a id=\"linkedin\" href=\"https://www.linkedin.com/in/chrisgeohring\">\n          <img alt=\"LinkedIn\" src=\"./linkedinbw.png\" width=\"40\" height=\"40\" />\n        </a>\n        <br />\n      </footer>\n    </div>\n  );\n};\n\nexport default Contact;\n","import React, { ReactElement } from \"react\";\nimport \"./index.scss\";\n\nconst Home = (): ReactElement => {\n  return (\n    <section id=\"home\">\n      <video id=\"myVideo\" autoPlay loop muted playsInline>\n        <source src=\"me.mp4\" type=\"video/mp4\" />\n        Your browser does not support the video tag.\n      </video>\n    </section>\n  );\n};\n\nexport default Home;\n","import React, { ReactElement } from \"react\";\nimport { Container, Row, Col } from \"reactstrap\";\nimport \"./index.scss\";\n\nconst AboutMe = (): ReactElement => {\n  return (\n    <section id=\"about\">\n      <Container>\n        <div id=\"aboutme-blurb\">\n          <h2>About Me</h2>\n          <p>\n            I'm a Software Engineer from Fort Collins, Colorado and currently living in San Diego, California. I began\n            programming in 2014 at Colorado State University, the first language being Java. Later on in the bachelors\n            program we used C++, and Python as well.\n          </p>\n          <p>\n            In the summer of 2015 I took on an internship with HP in Fort Collins to help develop web services to\n            support the HP Jet Advantage Capture App. This experience exposed me to writing code that is deployed and\n            used in the real world with HP Customers, while finishing up my bachelors in Computer Science.\n          </p>\n          <p>\n            My summer 2015 internship turned into a year round role begining that Fall which lasted until my graduation\n            in 2017. I then joined as a full time employee. Throughout my time as an intern, I helped flesh out more\n            features for our suite of microservies that Jet Advantage Capuure was using for document sending. This\n            feature is also implemented in the HP Smart App, known as SmartTasks.\n          </p>\n          <p>\n            As a full time employee in Fort Collins, I helped develop the PageLift technology that is used in\n            JetAdvantageCapture and the HP Smart App. This feature, written in C++, lets you capture documents using\n            your cell phone camera. It automatically detects borders, performs an image transform, and finally image\n            enhancement. I was in charge of keeping the feature performant on a range of smartphones, and utilized\n            techniques such as threading to gain speed increases where it was applicable.\n          </p>\n          <p>\n            In 2018, I took a job in San Diego for a full stack development role for HP Reveal. On HP Reveal I worked on\n            Ruby On Rails based micro services, running on docker containers in AWS. I also worked on the\n            Reveal/LinkReader applications for iOS and Android, writing new features and fixing bugs where necessary. I\n            had the pleasure of working directly with HP Labs on Secure QR Codes, which was an offering for solving\n            anti-counterfeit packaging.\n          </p>\n          <p>\n            In early 2020, the HP Reveal solution was sold to a third party vendor. I shifted to a new project that uses\n            web based technology in order to write code once, and deploy everywhere (think react native, or ionic\n            capacitor). This project has had me be involved with writing code with React, Android, iOS, Windows & Mac.\n          </p>\n          <br />\n          <Row id=\"images\">\n            <Col xs=\"6\">\n              <a href=\"https://www.colostate.edu\">\n                <img alt=\"ColoradoState\" src=\"./rams.png\" width=\"120\" height=\"120\" />\n              </a>\n            </Col>\n            <Col xs=\"6\">\n              <a href=\"https://www.hp.com\">\n                <img alt=\"HP\" src=\"./hp.png\" width=\"120\" height=\"120\" />\n              </a>\n            </Col>\n          </Row>\n        </div>\n      </Container>\n    </section>\n  );\n};\n\nexport default AboutMe;\n","import React from \"react\";\nimport { Badge, Button, Card, CardHeader, CardBody, CardTitle, CardText, CardFooter } from \"reactstrap\";\nimport \"./index.scss\";\nexport interface Project {\n  title: string;\n  text: string;\n  languages: string[];\n  link?: string;\n}\n\nconst ProjectCard = (props: Project) => {\n  const cardFooter = props.link ? (\n    <CardFooter>\n      Technologies Used\n      <br />\n      {props.languages.map(language => {\n        return <Badge variant=\"secondary\">{language}</Badge>;\n      })}\n      <br />\n      <br />\n      <Button className=\"button-visit\" variant=\"primary\" href={props.link}>\n        Visit\n      </Button>\n    </CardFooter>\n  ) : null;\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>{props.title}</CardTitle>\n      </CardHeader>\n      <CardBody>\n        <CardText>{props.text}</CardText>\n      </CardBody>\n      {cardFooter}\n    </Card>\n  );\n};\n\nexport default ProjectCard;\n","import React, { ReactElement } from \"react\";\nimport { Row, Container } from \"reactstrap\";\nimport \"./index.scss\";\nimport ProjectCard, { Project } from \"../../components/ProjectCard\";\nimport projectData from \"./projects.json\";\nconst Projects = (): ReactElement => {\n  const projects = projectData.projects;\n  return (\n    <section id=\"projects\">\n      <Container id=\"projects-container\">\n        <div id=\"pinner\">\n          <div id=\"projects-blurb\">\n            <br />\n            <br />\n            <h2>Projects</h2>\n            <br />\n            <br />\n            <Row className=\"justify-content-center\">\n              {projects.map((project: Project) => {\n                return (\n                  <ProjectCard\n                    title={project.title}\n                    text={project.text}\n                    languages={project.languages}\n                    link={project.link}\n                  />\n                );\n              })}\n            </Row>\n          </div>\n        </div>\n      </Container>\n    </section>\n  );\n};\n\nexport default Projects;\n","import React from \"react\";\n// import logo from './logo.svg';\nimport \"./App.css\";\nimport Navbar from \"./components/Navbar\";\nimport Contact from \"./sections/contact\";\nimport Home from \"./sections/home\";\nimport AboutMe from \"./sections/aboutme\";\nimport Projects from \"./sections/projects\";\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Navbar />\n      <Home />\n      <AboutMe />\n      <Projects />\n      <Contact />\n    </div>\n  );\n};\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nfunction registerValidSW(swUrl: string, config?: Config): void {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = (): void => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = (): void => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config): void {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (response.status === 404 || (contentType != null && contentType.indexOf(\"javascript\") === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\"No internet connection found. App is running in offline mode.\");\n    });\n}\n\nexport function register(config?: Config): void {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", (): void => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nexport function unregister(): void {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}